// This file is auto-generated by @hey-api/openapi-ts

import { type Options, get, getCluster, getClusterByClusterPartitions, getClusterByClusterNodes, getClusterByClusterNodesByNodenameErrorMessages, getClusterByClusterErrorMessages, getClusterByClusterNodesByNodenameInfo, getClusterByClusterNodesInfo, getClusterByClusterNodesByNodenameStates, getClusterByClusterNodesStates, getClusterByClusterNodesByNodenameTopology, getClusterByClusterNodesLastProbeTimestamp, getClusterByClusterNodesProcessGpuUtil, getClusterByClusterNodesByNodenameProcessGpuUtil, getClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseries, getClusterByClusterNodesProcessGpuTimeseries, getClusterByClusterNodesByNodenameProcessGpuTimeseries, getClusterByClusterJobsByJobIdProcessTimeseries, getClusterByClusterJobsProcessTimeseries, getClusterByClusterJobsByJobIdProcessGpuTimeseries, getClusterByClusterJobsProcessGpuTimeseries, getClusterByClusterNodesMemoryTimeseries, getClusterByClusterNodesByNodenameMemoryTimeseries, getClusterByClusterNodesCpuTimeseries, getClusterByClusterNodesByNodenameCpuTimeseries, getClusterByClusterNodesGpuTimeseries, getClusterByClusterNodesByNodenameGpuTimeseries, getClusterByClusterJobs, getClusterByClusterJobsByJobIdEpochByEpochInfo, getClusterByClusterJobsByJobIdEpochByEpoch, getClusterByClusterJobsByJobIdInfo, getClusterByClusterJobsByJobId, getClusterByClusterJobsQuery, getJobquery, getJobprofile, getClusterByClusterQueries, getClusterByClusterQueriesByQueryName, getBenchmarksByBenchmarkName } from '../sdk.gen'
import { queryOptions } from '@tanstack/react-query'
import type { GetData, GetClusterData, GetClusterByClusterPartitionsData, GetClusterByClusterNodesData, GetClusterByClusterNodesByNodenameErrorMessagesData, GetClusterByClusterErrorMessagesData, GetClusterByClusterNodesByNodenameInfoData, GetClusterByClusterNodesInfoData, GetClusterByClusterNodesByNodenameStatesData, GetClusterByClusterNodesStatesData, GetClusterByClusterNodesByNodenameTopologyData, GetClusterByClusterNodesLastProbeTimestampData, GetClusterByClusterNodesProcessGpuUtilData, GetClusterByClusterNodesByNodenameProcessGpuUtilData, GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesData, GetClusterByClusterNodesProcessGpuTimeseriesData, GetClusterByClusterNodesByNodenameProcessGpuTimeseriesData, GetClusterByClusterJobsByJobIdProcessTimeseriesData, GetClusterByClusterJobsProcessTimeseriesData, GetClusterByClusterJobsByJobIdProcessGpuTimeseriesData, GetClusterByClusterJobsProcessGpuTimeseriesData, GetClusterByClusterNodesMemoryTimeseriesData, GetClusterByClusterNodesByNodenameMemoryTimeseriesData, GetClusterByClusterNodesCpuTimeseriesData, GetClusterByClusterNodesByNodenameCpuTimeseriesData, GetClusterByClusterNodesGpuTimeseriesData, GetClusterByClusterNodesByNodenameGpuTimeseriesData, GetClusterByClusterJobsData, GetClusterByClusterJobsByJobIdEpochByEpochInfoData, GetClusterByClusterJobsByJobIdEpochByEpochData, GetClusterByClusterJobsByJobIdInfoData, GetClusterByClusterJobsByJobIdData, GetClusterByClusterJobsQueryData, GetJobqueryData, GetJobprofileData, GetClusterByClusterQueriesData, GetClusterByClusterQueriesByQueryNameData, GetBenchmarksByBenchmarkNameData } from '../types.gen'
import { client as _heyApiClient } from '../client.gen'

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
  const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (tags) {
    params.tags = tags
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [
    params
  ]
}

export const getQueryKey = (options?: Options<GetData>) => createQueryKey('get', options)

/**
 * Hello
 */
export const getOptions = (options?: Options<GetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await get({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getQueryKey(options)
  })
}

export const getClusterQueryKey = (options?: Options<GetClusterData>) => createQueryKey('getCluster', options)

/**
 * Available clusters
 * Get the list of clusters (available at a particular point in time)
 */
export const getClusterOptions = (options?: Options<GetClusterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCluster({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterQueryKey(options)
  })
}

export const getClusterByClusterPartitionsQueryKey = (options: Options<GetClusterByClusterPartitionsData>) => createQueryKey('getClusterByClusterPartitions', options)

/**
 * Partitions available in a given cluster
 * Get status of partitions of a cluster (for a specific time point)
 */
export const getClusterByClusterPartitionsOptions = (options: Options<GetClusterByClusterPartitionsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterPartitions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterPartitionsQueryKey(options)
  })
}

export const getClusterByClusterNodesQueryKey = (options: Options<GetClusterByClusterNodesData>) => createQueryKey('getClusterByClusterNodes', options)

/**
 * Nodes available in a given cluster
 * Get the list of node names in a cluster
 */
export const getClusterByClusterNodesOptions = (options: Options<GetClusterByClusterNodesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameErrorMessagesQueryKey = (options: Options<GetClusterByClusterNodesByNodenameErrorMessagesData>) => createQueryKey('getClusterByClusterNodesByNodenameErrorMessages', options)

/**
 * Node-specific error messages
 * Get error_message of a cluster (for a specific time point) (or nodes)
 */
export const getClusterByClusterNodesByNodenameErrorMessagesOptions = (options: Options<GetClusterByClusterNodesByNodenameErrorMessagesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameErrorMessages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameErrorMessagesQueryKey(options)
  })
}

export const getClusterByClusterErrorMessagesQueryKey = (options: Options<GetClusterByClusterErrorMessagesData>) => createQueryKey('getClusterByClusterErrorMessages', options)

/**
 * Error messages collected for the entire cluster
 * Get error_message of a cluster (for a specific time point) (or nodes)
 */
export const getClusterByClusterErrorMessagesOptions = (options: Options<GetClusterByClusterErrorMessagesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterErrorMessages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterErrorMessagesQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameInfoQueryKey = (options: Options<GetClusterByClusterNodesByNodenameInfoData>) => createQueryKey('getClusterByClusterNodesByNodenameInfo', options)

/**
 * Detailed information about a single node in a cluster
 * Get available information about nodes in a cluster
 *
 * It will only contain information about reporting nodes - in some case a node might exist in a cluster, but
 * not system information has been received yet. To check - compare with the complete node list /cluster/{cluster}/nodes
 */
export const getClusterByClusterNodesByNodenameInfoOptions = (options: Options<GetClusterByClusterNodesByNodenameInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameInfoQueryKey(options)
  })
}

export const getClusterByClusterNodesInfoQueryKey = (options: Options<GetClusterByClusterNodesInfoData>) => createQueryKey('getClusterByClusterNodesInfo', options)

/**
 * Detailed information about nodes in a cluster
 * Get available information about nodes in a cluster
 *
 * It will only contain information about reporting nodes - in some case a node might exist in a cluster, but
 * not system information has been received yet. To check - compare with the complete node list /cluster/{cluster}/nodes
 */
export const getClusterByClusterNodesInfoOptions = (options: Options<GetClusterByClusterNodesInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesInfoQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameStatesQueryKey = (options: Options<GetClusterByClusterNodesByNodenameStatesData>) => createQueryKey('getClusterByClusterNodesByNodenameStates', options)

/**
 * Information about the state(s) of a specific nodes in a cluster
 * Get the state(s) of nodes in a given cluster
 */
export const getClusterByClusterNodesByNodenameStatesOptions = (options: Options<GetClusterByClusterNodesByNodenameStatesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameStates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameStatesQueryKey(options)
  })
}

export const getClusterByClusterNodesStatesQueryKey = (options: Options<GetClusterByClusterNodesStatesData>) => createQueryKey('getClusterByClusterNodesStates', options)

/**
 * Information about the states of all nodes in a cluster
 * Get the state(s) of nodes in a given cluster
 */
export const getClusterByClusterNodesStatesOptions = (options: Options<GetClusterByClusterNodesStatesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesStates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesStatesQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameTopologyQueryKey = (options: Options<GetClusterByClusterNodesByNodenameTopologyData>) => createQueryKey('getClusterByClusterNodesByNodenameTopology', options)

/**
 * Topology information (as image/svg+xml) for a specific node in a cluster
 * Get the topology information for a node (if available)
 */
export const getClusterByClusterNodesByNodenameTopologyOptions = (options: Options<GetClusterByClusterNodesByNodenameTopologyData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameTopology({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameTopologyQueryKey(options)
  })
}

export const getClusterByClusterNodesLastProbeTimestampQueryKey = (options: Options<GetClusterByClusterNodesLastProbeTimestampData>) => createQueryKey('getClusterByClusterNodesLastProbeTimestamp', options)

/**
 * Get the timestamp of the last message received for each node in the given cluster
 * Retrieve the last known timestamps of records added for nodes in the cluster
 *
 * A timestamp of None (or null in the Json response) means, that no monitoring data has been recorded for this node.
 * In this case the node has probably no probe, i.e. sonar daemon running.
 */
export const getClusterByClusterNodesLastProbeTimestampOptions = (options: Options<GetClusterByClusterNodesLastProbeTimestampData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesLastProbeTimestamp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesLastProbeTimestampQueryKey(options)
  })
}

export const getClusterByClusterNodesProcessGpuUtilQueryKey = (options: Options<GetClusterByClusterNodesProcessGpuUtilData>) => createQueryKey('getClusterByClusterNodesProcessGpuUtil', options)

/**
 * Nodes Process Gpu Util
 * Retrieve the latest gpu utilization
 */
export const getClusterByClusterNodesProcessGpuUtilOptions = (options: Options<GetClusterByClusterNodesProcessGpuUtilData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesProcessGpuUtil({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesProcessGpuUtilQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameProcessGpuUtilQueryKey = (options: Options<GetClusterByClusterNodesByNodenameProcessGpuUtilData>) => createQueryKey('getClusterByClusterNodesByNodenameProcessGpuUtil', options)

/**
 * Nodes Process Gpu Util
 * Retrieve the latest gpu utilization
 */
export const getClusterByClusterNodesByNodenameProcessGpuUtilOptions = (options: Options<GetClusterByClusterNodesByNodenameProcessGpuUtilData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameProcessGpuUtil({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameProcessGpuUtilQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesData>) => createQueryKey('getClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseries', options)

/**
 * Get **node**-related and **job**-related timeseries of GPU samples
 * Get node-related timeseries for processes running on gpu
 */
export const getClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesOptions = (options: Options<GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterNodesProcessGpuTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesProcessGpuTimeseriesData>) => createQueryKey('getClusterByClusterNodesProcessGpuTimeseries', options)

/**
 * Nodes Sample Process Gpu
 * Get node-related timeseries for processes running on gpu
 */
export const getClusterByClusterNodesProcessGpuTimeseriesOptions = (options: Options<GetClusterByClusterNodesProcessGpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesProcessGpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesProcessGpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameProcessGpuTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesByNodenameProcessGpuTimeseriesData>) => createQueryKey('getClusterByClusterNodesByNodenameProcessGpuTimeseries', options)

/**
 * Nodes Sample Process Gpu
 * Get node-related timeseries for processes running on gpu
 */
export const getClusterByClusterNodesByNodenameProcessGpuTimeseriesOptions = (options: Options<GetClusterByClusterNodesByNodenameProcessGpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameProcessGpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameProcessGpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterJobsByJobIdProcessTimeseriesQueryKey = (options: Options<GetClusterByClusterJobsByJobIdProcessTimeseriesData>) => createQueryKey('getClusterByClusterJobsByJobIdProcessTimeseries', options)

/**
 * Get **job**-specific process (cpu/memory/gpu) timeseries data
 * Get job-related timeseries for all processes running on cpu and gpu
 *
 * By default this related to SLURM jobs (epoch set to 0).
 * To relate to non-SLURM jobs, provide the epoch as parameter to the query.
 *
 * That will be separated in 'cpu_memory' and 'gpus'
 */
export const getClusterByClusterJobsByJobIdProcessTimeseriesOptions = (options: Options<GetClusterByClusterJobsByJobIdProcessTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsByJobIdProcessTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsByJobIdProcessTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterJobsProcessTimeseriesQueryKey = (options: Options<GetClusterByClusterJobsProcessTimeseriesData>) => createQueryKey('getClusterByClusterJobsProcessTimeseries', options)

/**
 * Get all jobs process timeseries-data (cpu/memory/gpu) on a given cluster
 * Get job-related timeseries for all processes running on cpu and gpu
 *
 * By default this related to SLURM jobs (epoch set to 0).
 * To relate to non-SLURM jobs, provide the epoch as parameter to the query.
 *
 * That will be separated in 'cpu_memory' and 'gpus'
 */
export const getClusterByClusterJobsProcessTimeseriesOptions = (options: Options<GetClusterByClusterJobsProcessTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsProcessTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsProcessTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterJobsByJobIdProcessGpuTimeseriesQueryKey = (options: Options<GetClusterByClusterJobsByJobIdProcessGpuTimeseriesData>) => createQueryKey('getClusterByClusterJobsByJobIdProcessGpuTimeseries', options)

/**
 * Get GPU sample as timeseries aggregate for a specific job on a given cluster
 * Get job-related timeseries data for processes running on gpu
 */
export const getClusterByClusterJobsByJobIdProcessGpuTimeseriesOptions = (options: Options<GetClusterByClusterJobsByJobIdProcessGpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsByJobIdProcessGpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsByJobIdProcessGpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterJobsProcessGpuTimeseriesQueryKey = (options: Options<GetClusterByClusterJobsProcessGpuTimeseriesData>) => createQueryKey('getClusterByClusterJobsProcessGpuTimeseries', options)

/**
 * Get GPU samples as timeseries, aggregated per job (for all jobs) and process on a given cluster
 * Get job-related timeseries data for processes running on gpu
 */
export const getClusterByClusterJobsProcessGpuTimeseriesOptions = (options: Options<GetClusterByClusterJobsProcessGpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsProcessGpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsProcessGpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterNodesMemoryTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesMemoryTimeseriesData>) => createQueryKey('getClusterByClusterNodesMemoryTimeseries', options)

/**
 * Get timeseries data of Memory samples for all nodes in a given cluster
 * Get node-related timeseries data for processes running on memory
 */
export const getClusterByClusterNodesMemoryTimeseriesOptions = (options: Options<GetClusterByClusterNodesMemoryTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesMemoryTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesMemoryTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameMemoryTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesByNodenameMemoryTimeseriesData>) => createQueryKey('getClusterByClusterNodesByNodenameMemoryTimeseries', options)

/**
 * Get **node**-specific timeseries data of Memory samples
 * Get node-related timeseries data for processes running on memory
 */
export const getClusterByClusterNodesByNodenameMemoryTimeseriesOptions = (options: Options<GetClusterByClusterNodesByNodenameMemoryTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameMemoryTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameMemoryTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterNodesCpuTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesCpuTimeseriesData>) => createQueryKey('getClusterByClusterNodesCpuTimeseries', options)

/**
 * Get timeseries data of CPU samples for all nodes in a given cluster
 * Get node-related timeseries data for processes running on memory
 */
export const getClusterByClusterNodesCpuTimeseriesOptions = (options: Options<GetClusterByClusterNodesCpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesCpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesCpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameCpuTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesByNodenameCpuTimeseriesData>) => createQueryKey('getClusterByClusterNodesByNodenameCpuTimeseries', options)

/**
 * Get **node**-specific timeseries data of CPU samples
 * Get node-related timeseries data for processes running on memory
 */
export const getClusterByClusterNodesByNodenameCpuTimeseriesOptions = (options: Options<GetClusterByClusterNodesByNodenameCpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameCpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameCpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterNodesGpuTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesGpuTimeseriesData>) => createQueryKey('getClusterByClusterNodesGpuTimeseries', options)

/**
 * Get timeseries data of GPU samples for all nodes in a given cluster
 */
export const getClusterByClusterNodesGpuTimeseriesOptions = (options: Options<GetClusterByClusterNodesGpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesGpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesGpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterNodesByNodenameGpuTimeseriesQueryKey = (options: Options<GetClusterByClusterNodesByNodenameGpuTimeseriesData>) => createQueryKey('getClusterByClusterNodesByNodenameGpuTimeseries', options)

/**
 * Get **node**-specific timeseries data of GPU samples
 */
export const getClusterByClusterNodesByNodenameGpuTimeseriesOptions = (options: Options<GetClusterByClusterNodesByNodenameGpuTimeseriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterNodesByNodenameGpuTimeseries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterNodesByNodenameGpuTimeseriesQueryKey(options)
  })
}

export const getClusterByClusterJobsQueryKey = (options: Options<GetClusterByClusterJobsData>) => createQueryKey('getClusterByClusterJobs', options)

/**
 * Get jobs running on the given cluster
 * Check current status of jobs
 */
export const getClusterByClusterJobsOptions = (options: Options<GetClusterByClusterJobsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsQueryKey(options)
  })
}

export const getClusterByClusterJobsByJobIdEpochByEpochInfoQueryKey = (options: Options<GetClusterByClusterJobsByJobIdEpochByEpochInfoData>) => createQueryKey('getClusterByClusterJobsByJobIdEpochByEpochInfo', options)

/**
 * Get job information by id and epoch for the given cluster
 * Get job information optionally limited by a given timeframe and output provided in a specified resolution of time
 */
export const getClusterByClusterJobsByJobIdEpochByEpochInfoOptions = (options: Options<GetClusterByClusterJobsByJobIdEpochByEpochInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsByJobIdEpochByEpochInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsByJobIdEpochByEpochInfoQueryKey(options)
  })
}

export const getClusterByClusterJobsByJobIdEpochByEpochQueryKey = (options: Options<GetClusterByClusterJobsByJobIdEpochByEpochData>) => createQueryKey('getClusterByClusterJobsByJobIdEpochByEpoch', options)

/**
 * Get job information by id and epoch for the given cluster
 * Get job information optionally limited by a given timeframe and output provided in a specified resolution of time
 */
export const getClusterByClusterJobsByJobIdEpochByEpochOptions = (options: Options<GetClusterByClusterJobsByJobIdEpochByEpochData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsByJobIdEpochByEpoch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsByJobIdEpochByEpochQueryKey(options)
  })
}

export const getClusterByClusterJobsByJobIdInfoQueryKey = (options: Options<GetClusterByClusterJobsByJobIdInfoData>) => createQueryKey('getClusterByClusterJobsByJobIdInfo', options)

/**
 * Get SLURM job information by id for the given cluster
 * Get job information optionally limited by a given timeframe and output provided in a specified resolution of time
 */
export const getClusterByClusterJobsByJobIdInfoOptions = (options: Options<GetClusterByClusterJobsByJobIdInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsByJobIdInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsByJobIdInfoQueryKey(options)
  })
}

export const getClusterByClusterJobsByJobIdQueryKey = (options: Options<GetClusterByClusterJobsByJobIdData>) => createQueryKey('getClusterByClusterJobsByJobId', options)

/**
 * Get SLURM job information by id for the given cluster
 * Get job information optionally limited by a given timeframe and output provided in a specified resolution of time
 */
export const getClusterByClusterJobsByJobIdOptions = (options: Options<GetClusterByClusterJobsByJobIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsByJobId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsByJobIdQueryKey(options)
  })
}

export const getClusterByClusterJobsQueryQueryKey = (options: Options<GetClusterByClusterJobsQueryData>) => createQueryKey('getClusterByClusterJobsQuery', options)

/**
 * Provides a generic job query interface
 */
export const getClusterByClusterJobsQueryOptions = (options: Options<GetClusterByClusterJobsQueryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterJobsQuery({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterJobsQueryQueryKey(options)
  })
}

export const getJobqueryQueryKey = (options?: Options<GetJobqueryData>) => createQueryKey('getJobquery', options)

/**
 * Dashboard Job Query
 */
export const getJobqueryOptions = (options?: Options<GetJobqueryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getJobquery({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getJobqueryQueryKey(options)
  })
}

export const getJobprofileQueryKey = (options: Options<GetJobprofileData>) => createQueryKey('getJobprofile', options)

/**
 * Dashboard Job Profile
 */
export const getJobprofileOptions = (options: Options<GetJobprofileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getJobprofile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getJobprofileQueryKey(options)
  })
}

export const getClusterByClusterQueriesQueryKey = (options: Options<GetClusterByClusterQueriesData>) => createQueryKey('getClusterByClusterQueries', options)

/**
 * Get the list of 'named' predefined queries
 */
export const getClusterByClusterQueriesOptions = (options: Options<GetClusterByClusterQueriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterQueries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterQueriesQueryKey(options)
  })
}

export const getClusterByClusterQueriesByQueryNameQueryKey = (options: Options<GetClusterByClusterQueriesByQueryNameData>) => createQueryKey('getClusterByClusterQueriesByQueryName', options)

/**
 * Execute a the 'named' query
 */
export const getClusterByClusterQueriesByQueryNameOptions = (options: Options<GetClusterByClusterQueriesByQueryNameData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClusterByClusterQueriesByQueryName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getClusterByClusterQueriesByQueryNameQueryKey(options)
  })
}

export const getBenchmarksByBenchmarkNameQueryKey = (options: Options<GetBenchmarksByBenchmarkNameData>) => createQueryKey('getBenchmarksByBenchmarkName', options)

/**
 * Benchmarks
 */
export const getBenchmarksByBenchmarkNameOptions = (options: Options<GetBenchmarksByBenchmarkNameData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getBenchmarksByBenchmarkName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getBenchmarksByBenchmarkNameQueryKey(options)
  })
}