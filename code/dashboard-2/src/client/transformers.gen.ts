// This file is auto-generated by @hey-api/openapi-ts

import type { GetClusterResponse, GetClusterByClusterPartitionsResponse, GetClusterByClusterNodesByNodenameStatesResponse, GetClusterByClusterNodesStatesResponse, GetClusterByClusterJobsResponse, GetClusterByClusterJobsByJobIdEpochByEpochInfoResponse, GetClusterByClusterJobsByJobIdEpochByEpochResponse, GetClusterByClusterJobsByJobIdInfoResponse, GetClusterByClusterJobsByJobIdResponse } from './types.gen'

const clusterResponseSchemaResponseTransformer = (data: any) => {
  data.time = new Date(data.time)
  return data
}

export const getClusterResponseTransformer = async (data: any): Promise<GetClusterResponse> => {
  data = data.map((item: any) => {
    return clusterResponseSchemaResponseTransformer(item)
  })
  return data
}

const jobResponseSchemaResponseTransformer = (data: any) => {
  data.time = new Date(data.time)
  if (data.start_time) {
    data.start_time = new Date(data.start_time)
  }
  data.submit_time = new Date(data.submit_time)
  if (data.end_time) {
    data.end_time = new Date(data.end_time)
  }
  return data
}

const partitionResponseOutputSchemaResponseTransformer = (data: any) => {
  data.time = new Date(data.time)
  data.jobs_pending = data.jobs_pending.map((item: any) => {
    return jobResponseSchemaResponseTransformer(item)
  })
  data.jobs_running = data.jobs_running.map((item: any) => {
    return jobResponseSchemaResponseTransformer(item)
  })
  data.pending_max_submit_time = new Date(data.pending_max_submit_time)
  return data
}

export const getClusterByClusterPartitionsResponseTransformer = async (data: any): Promise<GetClusterByClusterPartitionsResponse> => {
  data = data.map((item: any) => {
    return partitionResponseOutputSchemaResponseTransformer(item)
  })
  return data
}

const nodeStateResponseSchemaResponseTransformer = (data: any) => {
  data.time = new Date(data.time)
  return data
}

export const getClusterByClusterNodesByNodenameStatesResponseTransformer = async (data: any): Promise<GetClusterByClusterNodesByNodenameStatesResponse> => {
  data = data.map((item: any) => {
    return nodeStateResponseSchemaResponseTransformer(item)
  })
  return data
}

export const getClusterByClusterNodesStatesResponseTransformer = async (data: any): Promise<GetClusterByClusterNodesStatesResponse> => {
  data = data.map((item: any) => {
    return nodeStateResponseSchemaResponseTransformer(item)
  })
  return data
}

const jobsResponseSchemaResponseTransformer = (data: any) => {
  data.jobs = data.jobs.map((item: any) => {
    return jobResponseSchemaResponseTransformer(item)
  })
  return data
}

export const getClusterByClusterJobsResponseTransformer = async (data: any): Promise<GetClusterByClusterJobsResponse> => {
  data = jobsResponseSchemaResponseTransformer(data)
  return data
}

export const getClusterByClusterJobsByJobIdEpochByEpochInfoResponseTransformer = async (data: any): Promise<GetClusterByClusterJobsByJobIdEpochByEpochInfoResponse> => {
  data = jobResponseSchemaResponseTransformer(data)
  return data
}

export const getClusterByClusterJobsByJobIdEpochByEpochResponseTransformer = async (data: any): Promise<GetClusterByClusterJobsByJobIdEpochByEpochResponse> => {
  data = jobResponseSchemaResponseTransformer(data)
  return data
}

export const getClusterByClusterJobsByJobIdInfoResponseTransformer = async (data: any): Promise<GetClusterByClusterJobsByJobIdInfoResponse> => {
  data = jobResponseSchemaResponseTransformer(data)
  return data
}

export const getClusterByClusterJobsByJobIdResponseTransformer = async (data: any): Promise<GetClusterByClusterJobsByJobIdResponse> => {
  data = jobResponseSchemaResponseTransformer(data)
  return data
}