// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client'
import type { GetData, GetResponses, GetClusterData, GetClusterResponses, GetClusterErrors, GetClusterByClusterPartitionsData, GetClusterByClusterPartitionsResponses, GetClusterByClusterPartitionsErrors, GetClusterByClusterNodesData, GetClusterByClusterNodesResponses, GetClusterByClusterNodesErrors, GetClusterByClusterNodesByNodenameErrorMessagesData, GetClusterByClusterNodesByNodenameErrorMessagesResponses, GetClusterByClusterNodesByNodenameErrorMessagesErrors, GetClusterByClusterErrorMessagesData, GetClusterByClusterErrorMessagesResponses, GetClusterByClusterErrorMessagesErrors, GetClusterByClusterNodesByNodenameInfoData, GetClusterByClusterNodesByNodenameInfoResponses, GetClusterByClusterNodesByNodenameInfoErrors, GetClusterByClusterNodesInfoData, GetClusterByClusterNodesInfoResponses, GetClusterByClusterNodesInfoErrors, GetClusterByClusterNodesByNodenameStatesData, GetClusterByClusterNodesByNodenameStatesResponses, GetClusterByClusterNodesByNodenameStatesErrors, GetClusterByClusterNodesStatesData, GetClusterByClusterNodesStatesResponses, GetClusterByClusterNodesStatesErrors, GetClusterByClusterNodesByNodenameTopologyData, GetClusterByClusterNodesByNodenameTopologyResponses, GetClusterByClusterNodesByNodenameTopologyErrors, GetClusterByClusterNodesLastProbeTimestampData, GetClusterByClusterNodesLastProbeTimestampResponses, GetClusterByClusterNodesLastProbeTimestampErrors, GetClusterByClusterNodesProcessGpuUtilData, GetClusterByClusterNodesProcessGpuUtilResponses, GetClusterByClusterNodesProcessGpuUtilErrors, GetClusterByClusterNodesByNodenameProcessGpuUtilData, GetClusterByClusterNodesByNodenameProcessGpuUtilResponses, GetClusterByClusterNodesByNodenameProcessGpuUtilErrors, GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesData, GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesResponses, GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesErrors, GetClusterByClusterNodesProcessGpuTimeseriesData, GetClusterByClusterNodesProcessGpuTimeseriesResponses, GetClusterByClusterNodesProcessGpuTimeseriesErrors, GetClusterByClusterNodesByNodenameProcessGpuTimeseriesData, GetClusterByClusterNodesByNodenameProcessGpuTimeseriesResponses, GetClusterByClusterNodesByNodenameProcessGpuTimeseriesErrors, GetClusterByClusterJobsByJobIdProcessTimeseriesData, GetClusterByClusterJobsByJobIdProcessTimeseriesResponses, GetClusterByClusterJobsByJobIdProcessTimeseriesErrors, GetClusterByClusterJobsProcessTimeseriesData, GetClusterByClusterJobsProcessTimeseriesResponses, GetClusterByClusterJobsProcessTimeseriesErrors, GetClusterByClusterJobsByJobIdProcessGpuTimeseriesData, GetClusterByClusterJobsByJobIdProcessGpuTimeseriesResponses, GetClusterByClusterJobsByJobIdProcessGpuTimeseriesErrors, GetClusterByClusterJobsProcessGpuTimeseriesData, GetClusterByClusterJobsProcessGpuTimeseriesResponses, GetClusterByClusterJobsProcessGpuTimeseriesErrors, GetClusterByClusterNodesMemoryTimeseriesData, GetClusterByClusterNodesMemoryTimeseriesResponses, GetClusterByClusterNodesMemoryTimeseriesErrors, GetClusterByClusterNodesByNodenameMemoryTimeseriesData, GetClusterByClusterNodesByNodenameMemoryTimeseriesResponses, GetClusterByClusterNodesByNodenameMemoryTimeseriesErrors, GetClusterByClusterNodesCpuTimeseriesData, GetClusterByClusterNodesCpuTimeseriesResponses, GetClusterByClusterNodesCpuTimeseriesErrors, GetClusterByClusterNodesByNodenameCpuTimeseriesData, GetClusterByClusterNodesByNodenameCpuTimeseriesResponses, GetClusterByClusterNodesByNodenameCpuTimeseriesErrors, GetClusterByClusterNodesGpuTimeseriesData, GetClusterByClusterNodesGpuTimeseriesResponses, GetClusterByClusterNodesGpuTimeseriesErrors, GetClusterByClusterNodesByNodenameGpuTimeseriesData, GetClusterByClusterNodesByNodenameGpuTimeseriesResponses, GetClusterByClusterNodesByNodenameGpuTimeseriesErrors, GetClusterByClusterJobsData, GetClusterByClusterJobsResponses, GetClusterByClusterJobsErrors, GetClusterByClusterJobsByJobIdEpochByEpochInfoData, GetClusterByClusterJobsByJobIdEpochByEpochInfoResponses, GetClusterByClusterJobsByJobIdEpochByEpochInfoErrors, GetClusterByClusterJobsByJobIdEpochByEpochData, GetClusterByClusterJobsByJobIdEpochByEpochResponses, GetClusterByClusterJobsByJobIdEpochByEpochErrors, GetClusterByClusterJobsByJobIdInfoData, GetClusterByClusterJobsByJobIdInfoResponses, GetClusterByClusterJobsByJobIdInfoErrors, GetClusterByClusterJobsByJobIdData, GetClusterByClusterJobsByJobIdResponses, GetClusterByClusterJobsByJobIdErrors, GetClusterByClusterJobsQueryData, GetClusterByClusterJobsQueryResponses, GetClusterByClusterJobsQueryErrors, GetJobqueryData, GetJobqueryResponses, GetJobqueryErrors, GetJobprofileData, GetJobprofileResponses, GetJobprofileErrors, GetClusterByClusterQueriesData, GetClusterByClusterQueriesResponses, GetClusterByClusterQueriesErrors, GetClusterByClusterQueriesByQueryNameData, GetClusterByClusterQueriesByQueryNameResponses, GetClusterByClusterQueriesByQueryNameErrors, GetBenchmarksByBenchmarkNameData, GetBenchmarksByBenchmarkNameResponses, GetBenchmarksByBenchmarkNameErrors } from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Hello
 */
export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetResponses, unknown, ThrowOnError>({
    responseType: 'json',
    url: '/',
    ...options
  })
}

/**
 * Available clusters
 * Get the list of clusters (available at a particular point in time)
 */
export const getCluster = <ThrowOnError extends boolean = false>(options?: Options<GetClusterData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetClusterResponses, GetClusterErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster',
    ...options
  })
}

/**
 * Partitions available in a given cluster
 * Get status of partitions of a cluster (for a specific time point)
 */
export const getClusterByClusterPartitions = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterPartitionsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterPartitionsResponses, GetClusterByClusterPartitionsErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/partitions',
    ...options
  })
}

/**
 * Nodes available in a given cluster
 * Get the list of node names in a cluster
 */
export const getClusterByClusterNodes = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesResponses, GetClusterByClusterNodesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes',
    ...options
  })
}

/**
 * Node-specific error messages
 * Get error_message of a cluster (for a specific time point) (or nodes)
 */
export const getClusterByClusterNodesByNodenameErrorMessages = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameErrorMessagesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameErrorMessagesResponses, GetClusterByClusterNodesByNodenameErrorMessagesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/error_messages',
    ...options
  })
}

/**
 * Error messages collected for the entire cluster
 * Get error_message of a cluster (for a specific time point) (or nodes)
 */
export const getClusterByClusterErrorMessages = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterErrorMessagesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterErrorMessagesResponses, GetClusterByClusterErrorMessagesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/error_messages',
    ...options
  })
}

/**
 * Detailed information about a single node in a cluster
 * Get available information about nodes in a cluster
 *
 * It will only contain information about reporting nodes - in some case a node might exist in a cluster, but
 * not system information has been received yet. To check - compare with the complete node list /cluster/{cluster}/nodes
 */
export const getClusterByClusterNodesByNodenameInfo = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameInfoData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameInfoResponses, GetClusterByClusterNodesByNodenameInfoErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/info',
    ...options
  })
}

/**
 * Detailed information about nodes in a cluster
 * Get available information about nodes in a cluster
 *
 * It will only contain information about reporting nodes - in some case a node might exist in a cluster, but
 * not system information has been received yet. To check - compare with the complete node list /cluster/{cluster}/nodes
 */
export const getClusterByClusterNodesInfo = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesInfoData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesInfoResponses, GetClusterByClusterNodesInfoErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/info',
    ...options
  })
}

/**
 * Information about the state(s) of a specific nodes in a cluster
 * Get the state(s) of nodes in a given cluster
 */
export const getClusterByClusterNodesByNodenameStates = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameStatesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameStatesResponses, GetClusterByClusterNodesByNodenameStatesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/states',
    ...options
  })
}

/**
 * Information about the states of all nodes in a cluster
 * Get the state(s) of nodes in a given cluster
 */
export const getClusterByClusterNodesStates = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesStatesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesStatesResponses, GetClusterByClusterNodesStatesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/states',
    ...options
  })
}

/**
 * Topology information (as image/svg+xml) for a specific node in a cluster
 * Get the topology information for a node (if available)
 */
export const getClusterByClusterNodesByNodenameTopology = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameTopologyData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameTopologyResponses, GetClusterByClusterNodesByNodenameTopologyErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/topology',
    ...options
  })
}

/**
 * Get the timestamp of the last message received for each node in the given cluster
 * Retrieve the last known timestamps of records added for nodes in the cluster
 *
 * A timestamp of None (or null in the Json response) means, that no monitoring data has been recorded for this node.
 * In this case the node has probably no probe, i.e. sonar daemon running.
 */
export const getClusterByClusterNodesLastProbeTimestamp = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesLastProbeTimestampData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesLastProbeTimestampResponses, GetClusterByClusterNodesLastProbeTimestampErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/last_probe_timestamp',
    ...options
  })
}

/**
 * Nodes Process Gpu Util
 * Retrieve the latest gpu utilization
 */
export const getClusterByClusterNodesProcessGpuUtil = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesProcessGpuUtilData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesProcessGpuUtilResponses, GetClusterByClusterNodesProcessGpuUtilErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/process/gpu/util',
    ...options
  })
}

/**
 * Nodes Process Gpu Util
 * Retrieve the latest gpu utilization
 */
export const getClusterByClusterNodesByNodenameProcessGpuUtil = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameProcessGpuUtilData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameProcessGpuUtilResponses, GetClusterByClusterNodesByNodenameProcessGpuUtilErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/process/gpu/util',
    ...options
  })
}

/**
 * Get **node**-related and **job**-related timeseries of GPU samples
 * Get node-related timeseries for processes running on gpu
 */
export const getClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesResponses, GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/jobs/{job_id}/process/gpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Nodes Sample Process Gpu
 * Get node-related timeseries for processes running on gpu
 */
export const getClusterByClusterNodesProcessGpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesProcessGpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesProcessGpuTimeseriesResponses, GetClusterByClusterNodesProcessGpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/process/gpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Nodes Sample Process Gpu
 * Get node-related timeseries for processes running on gpu
 */
export const getClusterByClusterNodesByNodenameProcessGpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameProcessGpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameProcessGpuTimeseriesResponses, GetClusterByClusterNodesByNodenameProcessGpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/process/gpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get **job**-specific process (cpu/memory/gpu) timeseries data
 * Get job-related timeseries for all processes running on cpu and gpu
 *
 * By default this related to SLURM jobs (epoch set to 0).
 * To relate to non-SLURM jobs, provide the epoch as parameter to the query.
 *
 * That will be separated in 'cpu_memory' and 'gpus'
 */
export const getClusterByClusterJobsByJobIdProcessTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsByJobIdProcessTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsByJobIdProcessTimeseriesResponses, GetClusterByClusterJobsByJobIdProcessTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/{job_id}/process/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get all jobs process timeseries-data (cpu/memory/gpu) on a given cluster
 * Get job-related timeseries for all processes running on cpu and gpu
 *
 * By default this related to SLURM jobs (epoch set to 0).
 * To relate to non-SLURM jobs, provide the epoch as parameter to the query.
 *
 * That will be separated in 'cpu_memory' and 'gpus'
 */
export const getClusterByClusterJobsProcessTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsProcessTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsProcessTimeseriesResponses, GetClusterByClusterJobsProcessTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/process/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get GPU sample as timeseries aggregate for a specific job on a given cluster
 * Get job-related timeseries data for processes running on gpu
 */
export const getClusterByClusterJobsByJobIdProcessGpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsByJobIdProcessGpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsByJobIdProcessGpuTimeseriesResponses, GetClusterByClusterJobsByJobIdProcessGpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/{job_id}/process/gpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get GPU samples as timeseries, aggregated per job (for all jobs) and process on a given cluster
 * Get job-related timeseries data for processes running on gpu
 */
export const getClusterByClusterJobsProcessGpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsProcessGpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsProcessGpuTimeseriesResponses, GetClusterByClusterJobsProcessGpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/process/gpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get timeseries data of Memory samples for all nodes in a given cluster
 * Get node-related timeseries data for processes running on memory
 */
export const getClusterByClusterNodesMemoryTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesMemoryTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesMemoryTimeseriesResponses, GetClusterByClusterNodesMemoryTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/memory/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get **node**-specific timeseries data of Memory samples
 * Get node-related timeseries data for processes running on memory
 */
export const getClusterByClusterNodesByNodenameMemoryTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameMemoryTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameMemoryTimeseriesResponses, GetClusterByClusterNodesByNodenameMemoryTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/memory/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get timeseries data of CPU samples for all nodes in a given cluster
 * Get node-related timeseries data for processes running on memory
 */
export const getClusterByClusterNodesCpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesCpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesCpuTimeseriesResponses, GetClusterByClusterNodesCpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/cpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get **node**-specific timeseries data of CPU samples
 * Get node-related timeseries data for processes running on memory
 */
export const getClusterByClusterNodesByNodenameCpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameCpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameCpuTimeseriesResponses, GetClusterByClusterNodesByNodenameCpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/cpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get timeseries data of GPU samples for all nodes in a given cluster
 */
export const getClusterByClusterNodesGpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesGpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesGpuTimeseriesResponses, GetClusterByClusterNodesGpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/gpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get **node**-specific timeseries data of GPU samples
 */
export const getClusterByClusterNodesByNodenameGpuTimeseries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterNodesByNodenameGpuTimeseriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterNodesByNodenameGpuTimeseriesResponses, GetClusterByClusterNodesByNodenameGpuTimeseriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/nodes/{nodename}/gpu/timeseries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get jobs running on the given cluster
 * Check current status of jobs
 */
export const getClusterByClusterJobs = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsResponses, GetClusterByClusterJobsErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get job information by id and epoch for the given cluster
 * Get job information optionally limited by a given timeframe and output provided in a specified resolution of time
 */
export const getClusterByClusterJobsByJobIdEpochByEpochInfo = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsByJobIdEpochByEpochInfoData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsByJobIdEpochByEpochInfoResponses, GetClusterByClusterJobsByJobIdEpochByEpochInfoErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/{job_id}/epoch/{epoch}/info',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get job information by id and epoch for the given cluster
 * Get job information optionally limited by a given timeframe and output provided in a specified resolution of time
 */
export const getClusterByClusterJobsByJobIdEpochByEpoch = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsByJobIdEpochByEpochData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsByJobIdEpochByEpochResponses, GetClusterByClusterJobsByJobIdEpochByEpochErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/{job_id}/epoch/{epoch}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get SLURM job information by id for the given cluster
 * Get job information optionally limited by a given timeframe and output provided in a specified resolution of time
 */
export const getClusterByClusterJobsByJobIdInfo = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsByJobIdInfoData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsByJobIdInfoResponses, GetClusterByClusterJobsByJobIdInfoErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/{job_id}/info',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get SLURM job information by id for the given cluster
 * Get job information optionally limited by a given timeframe and output provided in a specified resolution of time
 */
export const getClusterByClusterJobsByJobId = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsByJobIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsByJobIdResponses, GetClusterByClusterJobsByJobIdErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/{job_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Provides a generic job query interface
 */
export const getClusterByClusterJobsQuery = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterJobsQueryData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterJobsQueryResponses, GetClusterByClusterJobsQueryErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/jobs/query',
    ...options
  })
}

/**
 * Dashboard Job Query
 */
export const getJobquery = <ThrowOnError extends boolean = false>(options?: Options<GetJobqueryData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetJobqueryResponses, GetJobqueryErrors, ThrowOnError>({
    responseType: 'json',
    url: '/jobquery',
    ...options
  })
}

/**
 * Dashboard Job Profile
 */
export const getJobprofile = <ThrowOnError extends boolean = false>(options: Options<GetJobprofileData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetJobprofileResponses, GetJobprofileErrors, ThrowOnError>({
    responseType: 'json',
    url: '/jobprofile',
    ...options
  })
}

/**
 * Get the list of 'named' predefined queries
 */
export const getClusterByClusterQueries = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterQueriesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterQueriesResponses, GetClusterByClusterQueriesErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/queries',
    ...options
  })
}

/**
 * Execute a the 'named' query
 */
export const getClusterByClusterQueriesByQueryName = <ThrowOnError extends boolean = false>(options: Options<GetClusterByClusterQueriesByQueryNameData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetClusterByClusterQueriesByQueryNameResponses, GetClusterByClusterQueriesByQueryNameErrors, ThrowOnError>({
    responseType: 'json',
    url: '/cluster/{cluster}/queries/{query_name}',
    ...options
  })
}

/**
 * Benchmarks
 */
export const getBenchmarksByBenchmarkName = <ThrowOnError extends boolean = false>(options: Options<GetBenchmarksByBenchmarkNameData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetBenchmarksByBenchmarkNameResponses, GetBenchmarksByBenchmarkNameErrors, ThrowOnError>({
    responseType: 'json',
    url: '/benchmarks/{benchmark_name}',
    ...options
  })
}