// This file is auto-generated by @hey-api/openapi-ts

/**
 * AppSettings
 */
export type AppSettings = {
    /**
     * Host
     */
    host?: string;
    /**
     * Port
     */
    port?: number;
    database?: DatabaseSettings;
    /**
     * Data Dir
     */
    data_dir?: string | null;
    /**
     * Db Schema Version
     */
    db_schema_version?: string | null;
};

/**
 * ClusterResponse
 */
export type ClusterResponse = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Cluster
     * Name of the cluster
     */
    cluster: string;
    /**
     * Slurm
     * Whether SLURM is in use (1) or not (0)
     */
    slurm: number;
    /**
     * Partitions
     * List of available partitions in this cluster
     */
    partitions: Array<string>;
    /**
     * Nodes
     * List of available nodes in this cluster
     */
    nodes: Array<string>;
};

/**
 * CombinedProcessTimeSeriesResponse
 */
export type CombinedProcessTimeSeriesResponse = {
    /**
     * Gpus
     */
    gpus: {
        [key: string]: Array<SampleProcessGpuAccResponse>;
    };
    /**
     * Cpu Memory
     */
    cpu_memory: Array<SampleProcessAccResponse>;
};

/**
 * DatabaseSettings
 */
export type DatabaseSettings = {
    /**
     * User
     */
    user?: string | null;
    /**
     * Password
     */
    password?: string | null;
    /**
     * Uri
     */
    uri?: string;
    /**
     * Create Missing
     */
    create_missing?: boolean;
};

/**
 * ErrorMessageResponse
 */
export type ErrorMessageResponse = {
    /**
     * Cluster
     * Name of the cluster
     */
    cluster: string;
    /**
     * Node
     * Name of the node (in the cluster)
     */
    node: string;
    /**
     * Details
     * Details of the reported error
     */
    details: string;
    /**
     * Time
     * Time at which this error occurred
     */
    time: string;
};

/**
 * GPUCardResponse
 */
export type GpuCardResponse = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Uuid
     * UUID as reported by card
     */
    uuid: string;
    /**
     * Manufacturer
     * A manufacturer: 'NVIDIA', 'AMD', 'INTEL' (other TBD)
     */
    manufacturer: string;
    /**
     * Model
     * card dependent, manufacturer's model string
     */
    model: string;
    /**
     * Architecture
     * card-dependent, manufacturer's arch string, for NVIDIA this is 'Turing', 'Volta', etc.
     */
    architecture: string;
    /**
     * Cluster
     * Name of the cluster that this GPU currently belongs to
     */
    cluster: string;
    /**
     * Node
     * Name of the node that this GPU belongs to
     */
    node: string;
    /**
     * Index
     * Local card index, may change at boot
     */
    index: number;
    /**
     * Address
     * Indicates an intra-system card address, e.g., PCI adress
     */
    address: string;
    /**
     * Driver
     * card-dependent, the manufacturer's driver string
     */
    driver: string;
    /**
     * Firmware
     * card-dependant, the manufacturer's firmware string
     */
    firmware: string;
    /**
     * Max Power Limit
     * card-dependent, max power the card can draw in W(atts)
     */
    max_power_limit: number;
    /**
     * Min Power Limit
     * card-dependent: min power the card will draw in W(atts)
     */
    min_power_limit: number;
    /**
     * Max Ce Clock
     * card-dependent, maximum clock of compute element
     */
    max_ce_clock: number;
    /**
     * Max Memory Clock
     * card-dependent, maximum clock of GPU memory
     */
    max_memory_clock: number;
};

/**
 * GpuJobSampleProcessGpuTimeseriesResponse
 */
export type GpuJobSampleProcessGpuTimeseriesResponse = {
    /**
     * Gpus
     */
    gpus: {
        [key: string]: Array<JobSpecificTimeseriesResponse>;
    };
};

/**
 * GpusProcessTimeSeriesResponse
 */
export type GpusProcessTimeSeriesResponse = {
    /**
     * Gpus
     */
    gpus: {
        [key: string]: Array<SampleProcessGpuAccResponse>;
    };
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * JobNodeSampleProcessGpuTimeseriesResponse
 */
export type JobNodeSampleProcessGpuTimeseriesResponseInput = {
    /**
     * Job
     * Job ID
     */
    job: number;
    /**
     * Epoch
     * Epoch uniquely identifying non-slurm jobs
     */
    epoch: number;
    /**
     * Nodes
     */
    nodes: {
        [key: string]: GpusProcessTimeSeriesResponse;
    };
};

/**
 * JobNodeSampleProcessGpuTimeseriesResponse
 */
export type JobNodeSampleProcessGpuTimeseriesResponseOutput = {
    /**
     * Job
     * Job ID
     */
    job: number;
    /**
     * Epoch
     * Epoch uniquely identifying non-slurm jobs
     */
    epoch: number;
    /**
     * Nodes
     */
    nodes: {
        [key: string]: GpusProcessTimeSeriesResponse;
    };
};

/**
 * JobProfileResultItem
 */
export type JobProfileResultItem = {
    /**
     * Job
     */
    job: number;
    /**
     * Time
     */
    time: string;
    /**
     * Points
     */
    points: Array<ProcessPoint>;
};

/**
 * JobQueryResultItem
 */
export type JobQueryResultItemInput = {
    /**
     * Job
     */
    job: string;
    /**
     * User
     */
    user: string;
    /**
     * Host
     */
    host: string;
    /**
     * Duration
     */
    duration: string;
    /**
     * Start
     */
    start: string;
    /**
     * End
     */
    end: string;
    /**
     * Cmd
     */
    cmd: string;
    /**
     * Cpu Peak
     */
    cpu_peak?: number;
    /**
     * Res Peak
     */
    res_peak?: number;
    /**
     * Mem Peak
     */
    mem_peak?: number;
    /**
     * Gpu Peak
     */
    gpu_peak?: number;
    /**
     * Gpumem Peak
     */
    gpumem_peak?: number;
};

/**
 * JobQueryResultItem
 */
export type JobQueryResultItemOutput = {
    /**
     * Job
     */
    job: string;
    /**
     * User
     */
    user: string;
    /**
     * Host
     */
    host: string;
    /**
     * Duration
     */
    duration: string;
    /**
     * Start
     */
    start: string;
    /**
     * End
     */
    end: string;
    /**
     * Cmd
     */
    cmd: string;
    /**
     * Cpu-Peak
     */
    'cpu-peak'?: number;
    /**
     * Res-Peak
     */
    'res-peak'?: number;
    /**
     * Mem-Peak
     */
    'mem-peak'?: number;
    /**
     * Gpu-Peak
     */
    'gpu-peak'?: number;
    /**
     * Gpumem-Peak
     */
    'gpumem-peak'?: number;
};

/**
 * JobResponse
 */
export type JobResponse = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Cluster
     * Name of the cluster
     */
    cluster: string;
    /**
     * Job Id
     * Identifier of the SLURM job
     */
    job_id: number;
    /**
     * Job Step
     *
     * The step identifier for the job identified by job_id.  For the topmost step/stage of a job
     * this will be the empty string.  Other values normally have the syntax of unsigned integers,
     * but may also be the strings "extern" and "batch".  This field's default value is the empty
     * string.
     *
     * NOTE: step 0 and step "empty string" are different, in fact thinking of a normal number-like
     * step name as a number may not be very helpful.
     *
     */
    job_step: string;
    /**
     * Job Name
     * Name of the job
     */
    job_name: string;
    /**
     * Job State
     * State of the job, e.g., PENDING, RUNNING, FAILED (see <a href='https://slurm.schedmd.com/job_state_codes.html#states'>SLURM Job States</a>)
     */
    job_state: string;
    /**
     * Array Job Id
     *
     * The overarching ID of an array job, see discussion in the postamble.
     *
     * sacct: the n of a `JobID` of the form `n_m.s`
     *
     * slurm: `JOB_INFO.array_job_id`.
     *
     */
    array_job_id?: number | null;
    /**
     * Array Task Id
     *
     * if `array_job_id` is not zero, the array element's index.  Individual elements of an array
     * job have their own plain job_id; the `array_job_id` identifies these as part of the same array
     * job and the array_task_id identifies their position within the array, see later discussion.
     *
     * sacct: the m of a `JobID` of the form `n_m.s`.
     *
     * slurm: `JOB_INFO.array_task_id`.
     *
     */
    array_task_id?: number | null;
    /**
     * Het Job Id
     * Id of the het(erogeneous) job (see <a href='https://slurm.schedmd.com/heterogeneous_jobs.html'>SLURM documentation</a>)
     */
    het_job_id: number;
    /**
     * Het Job Offset
     * Unique sequence number (starting with 0) the het(erogeneous) job component (see <a href='https://slurm.schedmd.com/heterogeneous_jobs.html'>SLURM documentation</a>)
     */
    het_job_offset: number;
    /**
     * User Name
     * Name of the user that started the job
     */
    user_name: string;
    /**
     * Account
     * Name of the account
     */
    account: string;
    /**
     * Start Time
     * Time at which the job started - only present if the job started
     */
    start_time?: Date | null;
    /**
     * Suspend Time
     * Time the job was suspended in seconds
     */
    suspend_time: number;
    /**
     * Submit Time
     * Time at which the job was submitted
     */
    submit_time: Date;
    /**
     * Time Limit
     * Time limit for this job in seconds
     */
    time_limit: number;
    /**
     * End Time
     * Time at which the job ended - only present if the job ended
     */
    end_time?: Date | null;
    /**
     * Exit Code
     * Exit code of the job - given it has finished
     */
    exit_code?: number | null;
    /**
     * Partition
     * Name of the partition this job is associated with
     */
    partition: string;
    /**
     * Reservation
     */
    reservation: string;
    /**
     * Nodes
     * List of nodes that are requested by this job
     */
    nodes: Array<string>;
    /**
     * Priority
     */
    priority: number;
    /**
     * Distribution
     */
    distribution: string;
    /**
     * Gres Detail
     * List of general resources details
     */
    gres_detail?: Array<string> | null;
    /**
     * Requested Cpus
     * Number of requested CPUs
     */
    requested_cpus: number;
    /**
     * Requested Memory Per Node
     * Requested memory in bytes per node
     */
    requested_memory_per_node: number;
    /**
     * Requested Node Count
     * Requested number of nodes
     */
    requested_node_count: number;
    /**
     * Minimum Cpus Per Node
     * Minimum required CPUs per node
     */
    minimum_cpus_per_node: number;
    /**
     * Used Gpu Uuids
     * UUIDs of GPUs that are actually used with this job - this might be different to the number of reserved GPUs (this a field computed by slurm-monitor)
     */
    used_gpu_uuids?: Array<string> | null;
    /**
     * Slurm Accounting Response data (<a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'>Slurm documentation</a>)
     */
    sacct?: SAcctResponse | null;
};

/**
 * JobSpecificTimeseriesResponse
 */
export type JobSpecificTimeseriesResponse = {
    /**
     * Job
     * Job ID
     */
    job: number;
    /**
     * Epoch
     * Epoch uniquely identifying non-slurm jobs
     */
    epoch: number;
    /**
     * Data
     */
    data: Array<unknown>;
};

/**
 * JobsResponse
 */
export type JobsResponse = {
    /**
     * Jobs
     * List of jobs
     */
    jobs: Array<JobResponse>;
};

/**
 * NodeGpuJobSampleProcessGpuTimeseriesResponse
 */
export type NodeGpuJobSampleProcessGpuTimeseriesResponse = {
    [key: string]: GpuJobSampleProcessGpuTimeseriesResponse;
};

/**
 * NodeGpuTimeseriesResponse
 * List of timeseries data per GPU
 */
export type NodeGpuTimeseriesResponse = {
    [key: string]: Array<SampleGpuTimeseriesResponse>;
};

/**
 * NodeInfoResponse
 */
export type NodeInfoResponse = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Cluster
     * Name of the cluster
     */
    cluster: string;
    /**
     * Node
     * Name of the node
     */
    node: string;
    /**
     * Os Name
     * Name of the operating system
     */
    os_name: string;
    /**
     * Os Release
     * Name of the specific release of the operating system
     */
    os_release: string;
    /**
     * Architecture
     * Architecture of this node
     */
    architecture: string;
    /**
     * Sockets
     * Number of CPU sockets available
     */
    sockets: number;
    /**
     * Cores Per Socket
     * Number of core per socket
     */
    cores_per_socket: number;
    /**
     * Threads Per Core
     * Number of threads per core
     */
    threads_per_core: number;
    /**
     * Cpu Model
     * CPU model specifier
     */
    cpu_model: string;
    /**
     * Memory
     * Available memory in this node in KiB
     */
    memory: number;
    /**
     * Topo Svg
     * The architecture topography (lstopo) as svg
     */
    topo_svg: string | null;
    /**
     * Cards
     * List of GPUs
     */
    cards: Array<GpuCardResponse>;
    /**
     * Partitions
     * List of partitions that this node belongs to
     */
    partitions: Array<string>;
};

/**
 * NodeSampleProcessGpuAccResponse
 */
export type NodeSampleProcessGpuAccResponse = {
    [key: string]: {
        [key: string]: SampleProcessGpuAccResponse;
    };
};

/**
 * NodeStateResponse
 */
export type NodeStateResponse = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Cluster
     * Name of the cluster
     */
    cluster: string;
    /**
     * Node
     * Name of the node
     */
    node: string;
    /**
     * States
     * State(s) this node is currently in
     */
    states: Array<string>;
};

/**
 * PartitionResponse
 */
export type PartitionResponseInput = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Cluster
     * Name of the cluster
     */
    cluster: string;
    /**
     * Name
     * Name of the partition
     */
    name: string;
    /**
     * Nodes
     * Nodes associated with this partition
     */
    nodes: Array<string>;
    /**
     * Nodes Compact
     * A compact representation of the list of nodes, e.g., n001,n002,n003 is n001-003
     */
    nodes_compact: Array<string>;
    /**
     * Jobs Pending
     * List of pending jobs in this partition (computed by slurm-monitor)
     */
    jobs_pending: Array<JobResponse>;
    /**
     * Jobs Running
     * List of running jobs in this partition (computed by slurm-monitor)
     */
    jobs_running: Array<JobResponse>;
    /**
     * Pending Max Submit Time
     * Timestamp of the job being longest in PENDING state
     */
    pending_max_submit_time: Date;
    /**
     * Running Latest Wait Time
     * Waiting time in seconds of the most recent started job in this partition
     */
    running_latest_wait_time: number;
    /**
     * Total Cpus
     * Total number of CPUs available in this partition
     */
    total_cpus: number;
    /**
     * Total Gpus
     * Total number of GPUs available in this partition
     */
    total_gpus: number;
    /**
     * Gpus Reserved
     * Total number of GPUs that are currently reserved in this partition
     */
    gpus_reserved: number;
    /**
     * Gpus In Use
     * UUIDs of gpus that are currently in use in this partition
     */
    gpus_in_use: Array<string>;
};

/**
 * PartitionResponse
 */
export type PartitionResponseOutput = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Cluster
     * Name of the cluster
     */
    cluster: string;
    /**
     * Name
     * Name of the partition
     */
    name: string;
    /**
     * Nodes
     * Nodes associated with this partition
     */
    nodes: Array<string>;
    /**
     * Nodes Compact
     * A compact representation of the list of nodes, e.g., n001,n002,n003 is n001-003
     */
    nodes_compact: Array<string>;
    /**
     * Jobs Pending
     * List of pending jobs in this partition (computed by slurm-monitor)
     */
    jobs_pending: Array<JobResponse>;
    /**
     * Jobs Running
     * List of running jobs in this partition (computed by slurm-monitor)
     */
    jobs_running: Array<JobResponse>;
    /**
     * Pending Max Submit Time
     * Timestamp of the job being longest in PENDING state
     */
    pending_max_submit_time: Date;
    /**
     * Running Latest Wait Time
     * Waiting time in seconds of the most recent started job in this partition
     */
    running_latest_wait_time: number;
    /**
     * Total Cpus
     * Total number of CPUs available in this partition
     */
    total_cpus: number;
    /**
     * Total Gpus
     * Total number of GPUs available in this partition
     */
    total_gpus: number;
    /**
     * Gpus Reserved
     * Total number of GPUs that are currently reserved in this partition
     */
    gpus_reserved: number;
    /**
     * Gpus In Use
     * UUIDs of gpus that are currently in use in this partition
     */
    gpus_in_use: Array<string>;
};

/**
 * ProcessPoint
 */
export type ProcessPoint = {
    /**
     * Command
     */
    command: string;
    /**
     * Pid
     */
    pid: number;
    /**
     * Nproc
     */
    nproc: number;
    /**
     * Cpu
     */
    cpu: number;
    /**
     * Mem
     */
    mem: number;
    /**
     * Res
     */
    res: number;
    /**
     * Gpu
     */
    gpu: number;
    /**
     * Gpumem
     */
    gpumem: number;
};

/**
 * QueriesResponse
 */
export type QueriesResponse = {
    /**
     * Queries
     * List of available predefined queries
     */
    queries: Array<string>;
};

/**
 * SAcctResponse
 */
export type SAcctResponse = {
    /**
     * Alloctres
     * Allocated Trackable resources (TRES) (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    AllocTRES: string;
    /**
     * Elapsedraw
     * The job's elapsed time in seconds (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    ElapsedRaw: number;
    /**
     * Systemcpu
     * The amount of CPU time used by the job or job step. (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    SystemCPU: number;
    /**
     * Usercpu
     * The amount of user CPU time used by the job or job step. (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    UserCPU: number;
    /**
     * Avevmsize
     * Average virtual memory size (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    AveVMSize: number;
    /**
     * Maxvmsize
     * Maximum virtual memory size (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    MaxVMSize: number;
    /**
     * Avecpu
     * Average CPU usage (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    AveCPU: number;
    /**
     * Mincpu
     * Minimum CPU usage (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    MinCPU: number;
    /**
     * Averss
     * Average resident set size of all tasks in job (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    AveRSS: number;
    /**
     * Maxrss
     * Maximum resident set size of all tasks in job (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    MaxRSS: number;
    /**
     * Avediskread
     * Average number of bytes read by all tasks in job (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    AveDiskRead: number;
    /**
     * Avediskwrite
     * Average number of bytes written by all tasks in job (see <a href='https://slurm.schedmd.com/sacct.html#SECTION_Job-Accounting-Fields'> SLURM Job Accounting</a>)
     */
    AveDiskWrite: number;
};

/**
 * SampleGpuBaseResponse
 */
export type SampleGpuBaseResponse = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Failing
     * If not zero and error code indicating a card failure state. Code=1 is 'generic failure'. Other codes TBD
     */
    failing: number;
    /**
     * Fan
     * Percent of primary fan's max speed, max exceed 100% on some cards in some cases
     */
    fan: number;
    /**
     * Compute Mode
     * card-dependent, current compute mode if known
     */
    compute_mode: string;
    /**
     * Performance State
     * Current performance level, card-specific >= 0, or unset for 'unknown'
     */
    performance_state: number;
    /**
     * Memory
     * Memory use in KiB
     */
    memory: number;
    /**
     * Memory Util
     * Memory used in percentage
     */
    memory_util: number;
    /**
     * Memory Clock
     * Memory current clock
     */
    memory_clock: number;
    /**
     * Ce Util
     * Compute element capability used in percentage
     */
    ce_util: number;
    /**
     * Ce Clock
     * Compute element current clock
     */
    ce_clock: number;
    /**
     * Temperature
     * Card temperature a primar sensor in degrees Celsius (can be negative
     */
    temperature: number;
    /**
     * Power
     * Current power usage in W(atts
     */
    power: number;
    /**
     * Power Limit
     * Current power limit in W(atts)
     */
    power_limit: number;
};

/**
 * SampleGpuTimeseriesResponse
 * Used GPU uuid and (local) index to identify the GPU and
 * provide the timeseries of samples
 */
export type SampleGpuTimeseriesResponse = {
    /**
     * Uuid
     * UUID of the GPU
     */
    uuid: string;
    /**
     * Index
     * Local index of the GPU
     */
    index: number;
    /**
     * Data
     * Timeseries of SampleGpu for this GPU
     */
    data: Array<SampleGpuBaseResponse>;
};

/**
 * SampleProcessAccResponse
 */
export type SampleProcessAccResponse = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Memory Resident
     * Current resident memory usage in KiB
     */
    memory_resident: number;
    /**
     * Memory Virtual
     * Current virtual memory usage in KiB
     */
    memory_virtual: number;
    /**
     * Memory Util
     * Current Memory utilization in percentage
     */
    memory_util: number;
    /**
     * Cpu Avg
     * Average CPU utilization over the lifetime of the accumulated processes
     */
    cpu_avg: number;
    /**
     * Cpu Util
     * Current CPU utilization in percentage
     */
    cpu_util: number;
    /**
     * Cpu Time
     * Total CPU time in seconds for the lifetime of the related processes
     */
    cpu_time: number;
    /**
     * Processes Avg
     * Average number of processes running for this accumulated response
     */
    processes_avg: number;
};

/**
 * SampleProcessGpuAccResponse
 */
export type SampleProcessGpuAccResponse = {
    /**
     * Time
     * Timezone Aware timestamp
     */
    time: Date;
    /**
     * Gpu Memory
     * GPU Memory being utilized in KiB
     */
    gpu_memory: number;
    /**
     * Gpu Util
     * GPU Compute utilization in percentage
     */
    gpu_util: number;
    /**
     * Gpu Memory Util
     * GPU Memory utilization in percentage
     */
    gpu_memory_util: number;
    /**
     * Pids
     * Process ids related to an accumulated sample
     */
    pids: Array<number>;
};

/**
 * SystemProcessTimeseriesResponse
 */
export type SystemProcessTimeseriesResponseInput = {
    /**
     * Job
     * Job ID
     */
    job: number;
    /**
     * Epoch
     * Epoch uniquely identifying non-slurm jobs
     */
    epoch: number;
    /**
     * Nodes
     */
    nodes: {
        [key: string]: CombinedProcessTimeSeriesResponse;
    };
};

/**
 * SystemProcessTimeseriesResponse
 */
export type SystemProcessTimeseriesResponseOutput = {
    /**
     * Job
     * Job ID
     */
    job: number;
    /**
     * Epoch
     * Epoch uniquely identifying non-slurm jobs
     */
    epoch: number;
    /**
     * Nodes
     */
    nodes: {
        [key: string]: CombinedProcessTimeSeriesResponse;
    };
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type GetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetClusterData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster';
};

export type GetClusterErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterError = GetClusterErrors[keyof GetClusterErrors];

export type GetClusterResponses = {
    /**
     * Response Cluster Cluster Get
     * Successful Response
     */
    200: Array<ClusterResponse>;
};

export type GetClusterResponse = GetClusterResponses[keyof GetClusterResponses];

export type GetClusterByClusterPartitionsData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster/{cluster}/partitions';
};

export type GetClusterByClusterPartitionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterPartitionsError = GetClusterByClusterPartitionsErrors[keyof GetClusterByClusterPartitionsErrors];

export type GetClusterByClusterPartitionsResponses = {
    /**
     * Response Partitions Cluster  Cluster  Partitions Get
     * Successful Response
     */
    200: Array<PartitionResponseOutput>;
};

export type GetClusterByClusterPartitionsResponse = GetClusterByClusterPartitionsResponses[keyof GetClusterByClusterPartitionsResponses];

export type GetClusterByClusterNodesData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes';
};

export type GetClusterByClusterNodesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesError = GetClusterByClusterNodesErrors[keyof GetClusterByClusterNodesErrors];

export type GetClusterByClusterNodesResponses = {
    /**
     * Response Nodes Cluster  Cluster  Nodes Get
     * Successful Response
     */
    200: Array<string>;
};

export type GetClusterByClusterNodesResponse = GetClusterByClusterNodesResponses[keyof GetClusterByClusterNodesResponses];

export type GetClusterByClusterNodesByNodenameErrorMessagesData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
    };
    query?: {
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/error_messages';
};

export type GetClusterByClusterNodesByNodenameErrorMessagesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameErrorMessagesError = GetClusterByClusterNodesByNodenameErrorMessagesErrors[keyof GetClusterByClusterNodesByNodenameErrorMessagesErrors];

export type GetClusterByClusterNodesByNodenameErrorMessagesResponses = {
    /**
     * Response Error Messages Cluster  Cluster  Nodes  Nodename  Error Messages Get
     * Successful Response
     */
    200: {
        [key: string]: ErrorMessageResponse;
    };
};

export type GetClusterByClusterNodesByNodenameErrorMessagesResponse = GetClusterByClusterNodesByNodenameErrorMessagesResponses[keyof GetClusterByClusterNodesByNodenameErrorMessagesResponses];

export type GetClusterByClusterErrorMessagesData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster/{cluster}/error_messages';
};

export type GetClusterByClusterErrorMessagesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterErrorMessagesError = GetClusterByClusterErrorMessagesErrors[keyof GetClusterByClusterErrorMessagesErrors];

export type GetClusterByClusterErrorMessagesResponses = {
    /**
     * Response Error Messages Cluster  Cluster  Error Messages Get
     * Successful Response
     */
    200: {
        [key: string]: ErrorMessageResponse;
    };
};

export type GetClusterByClusterErrorMessagesResponse = GetClusterByClusterErrorMessagesResponses[keyof GetClusterByClusterErrorMessagesResponses];

export type GetClusterByClusterNodesByNodenameInfoData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
    };
    query?: {
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/info';
};

export type GetClusterByClusterNodesByNodenameInfoErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameInfoError = GetClusterByClusterNodesByNodenameInfoErrors[keyof GetClusterByClusterNodesByNodenameInfoErrors];

export type GetClusterByClusterNodesByNodenameInfoResponses = {
    /**
     * Response Nodes Sysinfo Cluster  Cluster  Nodes  Nodename  Info Get
     * Successful Response
     */
    200: {
        [key: string]: NodeInfoResponse;
    };
};

export type GetClusterByClusterNodesByNodenameInfoResponse = GetClusterByClusterNodesByNodenameInfoResponses[keyof GetClusterByClusterNodesByNodenameInfoResponses];

export type GetClusterByClusterNodesInfoData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/info';
};

export type GetClusterByClusterNodesInfoErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesInfoError = GetClusterByClusterNodesInfoErrors[keyof GetClusterByClusterNodesInfoErrors];

export type GetClusterByClusterNodesInfoResponses = {
    /**
     * Response Nodes Sysinfo Cluster  Cluster  Nodes Info Get
     * Successful Response
     */
    200: {
        [key: string]: NodeInfoResponse;
    };
};

export type GetClusterByClusterNodesInfoResponse = GetClusterByClusterNodesInfoResponses[keyof GetClusterByClusterNodesInfoResponses];

export type GetClusterByClusterNodesByNodenameStatesData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
    };
    query?: {
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/states';
};

export type GetClusterByClusterNodesByNodenameStatesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameStatesError = GetClusterByClusterNodesByNodenameStatesErrors[keyof GetClusterByClusterNodesByNodenameStatesErrors];

export type GetClusterByClusterNodesByNodenameStatesResponses = {
    /**
     * Response Nodes States Cluster  Cluster  Nodes  Nodename  States Get
     * Successful Response
     */
    200: Array<NodeStateResponse>;
};

export type GetClusterByClusterNodesByNodenameStatesResponse = GetClusterByClusterNodesByNodenameStatesResponses[keyof GetClusterByClusterNodesByNodenameStatesResponses];

export type GetClusterByClusterNodesStatesData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Time In S
         */
        time_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/states';
};

export type GetClusterByClusterNodesStatesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesStatesError = GetClusterByClusterNodesStatesErrors[keyof GetClusterByClusterNodesStatesErrors];

export type GetClusterByClusterNodesStatesResponses = {
    /**
     * Response Nodes States Cluster  Cluster  Nodes States Get
     * Successful Response
     */
    200: Array<NodeStateResponse>;
};

export type GetClusterByClusterNodesStatesResponse = GetClusterByClusterNodesStatesResponses[keyof GetClusterByClusterNodesStatesResponses];

export type GetClusterByClusterNodesByNodenameTopologyData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string;
    };
    query?: never;
    url: '/cluster/{cluster}/nodes/{nodename}/topology';
};

export type GetClusterByClusterNodesByNodenameTopologyErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameTopologyError = GetClusterByClusterNodesByNodenameTopologyErrors[keyof GetClusterByClusterNodesByNodenameTopologyErrors];

export type GetClusterByClusterNodesByNodenameTopologyResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetClusterByClusterNodesLastProbeTimestampData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: never;
    url: '/cluster/{cluster}/nodes/last_probe_timestamp';
};

export type GetClusterByClusterNodesLastProbeTimestampErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesLastProbeTimestampError = GetClusterByClusterNodesLastProbeTimestampErrors[keyof GetClusterByClusterNodesLastProbeTimestampErrors];

export type GetClusterByClusterNodesLastProbeTimestampResponses = {
    /**
     * Response Nodes Last Probe Timestamp Cluster  Cluster  Nodes Last Probe Timestamp Get
     * Successful Response
     */
    200: {
        [key: string]: Date | null;
    };
};

export type GetClusterByClusterNodesLastProbeTimestampResponse = GetClusterByClusterNodesLastProbeTimestampResponses[keyof GetClusterByClusterNodesLastProbeTimestampResponses];

export type GetClusterByClusterNodesProcessGpuUtilData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Reference Time In S
         */
        reference_time_in_s?: number | null;
        /**
         * Window In S
         */
        window_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/process/gpu/util';
};

export type GetClusterByClusterNodesProcessGpuUtilErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesProcessGpuUtilError = GetClusterByClusterNodesProcessGpuUtilErrors[keyof GetClusterByClusterNodesProcessGpuUtilErrors];

export type GetClusterByClusterNodesProcessGpuUtilResponses = {
    /**
     * Successful Response
     */
    200: NodeSampleProcessGpuAccResponse;
};

export type GetClusterByClusterNodesProcessGpuUtilResponse = GetClusterByClusterNodesProcessGpuUtilResponses[keyof GetClusterByClusterNodesProcessGpuUtilResponses];

export type GetClusterByClusterNodesByNodenameProcessGpuUtilData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
    };
    query?: {
        /**
         * Reference Time In S
         */
        reference_time_in_s?: number | null;
        /**
         * Window In S
         */
        window_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/process/gpu/util';
};

export type GetClusterByClusterNodesByNodenameProcessGpuUtilErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameProcessGpuUtilError = GetClusterByClusterNodesByNodenameProcessGpuUtilErrors[keyof GetClusterByClusterNodesByNodenameProcessGpuUtilErrors];

export type GetClusterByClusterNodesByNodenameProcessGpuUtilResponses = {
    /**
     * Successful Response
     */
    200: NodeSampleProcessGpuAccResponse;
};

export type GetClusterByClusterNodesByNodenameProcessGpuUtilResponse = GetClusterByClusterNodesByNodenameProcessGpuUtilResponses[keyof GetClusterByClusterNodesByNodenameProcessGpuUtilResponses];

export type GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
        /**
         * Job Id
         */
        job_id: number | null;
    };
    query?: {
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/jobs/{job_id}/process/gpu/timeseries';
};

export type GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesError = GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesErrors[keyof GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesErrors];

export type GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesResponses = {
    /**
     * Successful Response
     */
    200: NodeGpuJobSampleProcessGpuTimeseriesResponse;
};

export type GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesResponse = GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesResponses[keyof GetClusterByClusterNodesByNodenameJobsByJobIdProcessGpuTimeseriesResponses];

export type GetClusterByClusterNodesProcessGpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Job Id
         */
        job_id?: number | null;
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/process/gpu/timeseries';
};

export type GetClusterByClusterNodesProcessGpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesProcessGpuTimeseriesError = GetClusterByClusterNodesProcessGpuTimeseriesErrors[keyof GetClusterByClusterNodesProcessGpuTimeseriesErrors];

export type GetClusterByClusterNodesProcessGpuTimeseriesResponses = {
    /**
     * Successful Response
     */
    200: NodeGpuJobSampleProcessGpuTimeseriesResponse;
};

export type GetClusterByClusterNodesProcessGpuTimeseriesResponse = GetClusterByClusterNodesProcessGpuTimeseriesResponses[keyof GetClusterByClusterNodesProcessGpuTimeseriesResponses];

export type GetClusterByClusterNodesByNodenameProcessGpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
    };
    query?: {
        /**
         * Job Id
         */
        job_id?: number | null;
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/process/gpu/timeseries';
};

export type GetClusterByClusterNodesByNodenameProcessGpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameProcessGpuTimeseriesError = GetClusterByClusterNodesByNodenameProcessGpuTimeseriesErrors[keyof GetClusterByClusterNodesByNodenameProcessGpuTimeseriesErrors];

export type GetClusterByClusterNodesByNodenameProcessGpuTimeseriesResponses = {
    /**
     * Successful Response
     */
    200: NodeGpuJobSampleProcessGpuTimeseriesResponse;
};

export type GetClusterByClusterNodesByNodenameProcessGpuTimeseriesResponse = GetClusterByClusterNodesByNodenameProcessGpuTimeseriesResponses[keyof GetClusterByClusterNodesByNodenameProcessGpuTimeseriesResponses];

export type GetClusterByClusterJobsByJobIdProcessTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Job Id
         */
        job_id: number | null;
    };
    query?: {
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/jobs/{job_id}/process/timeseries';
};

export type GetClusterByClusterJobsByJobIdProcessTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsByJobIdProcessTimeseriesError = GetClusterByClusterJobsByJobIdProcessTimeseriesErrors[keyof GetClusterByClusterJobsByJobIdProcessTimeseriesErrors];

export type GetClusterByClusterJobsByJobIdProcessTimeseriesResponses = {
    /**
     * Response Job Sample Process System Cluster  Cluster  Jobs  Job Id  Process Timeseries Get
     * Successful Response
     */
    200: Array<SystemProcessTimeseriesResponseOutput>;
};

export type GetClusterByClusterJobsByJobIdProcessTimeseriesResponse = GetClusterByClusterJobsByJobIdProcessTimeseriesResponses[keyof GetClusterByClusterJobsByJobIdProcessTimeseriesResponses];

export type GetClusterByClusterJobsProcessTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Job Id
         */
        job_id?: number | null;
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/jobs/process/timeseries';
};

export type GetClusterByClusterJobsProcessTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsProcessTimeseriesError = GetClusterByClusterJobsProcessTimeseriesErrors[keyof GetClusterByClusterJobsProcessTimeseriesErrors];

export type GetClusterByClusterJobsProcessTimeseriesResponses = {
    /**
     * Response Job Sample Process System Cluster  Cluster  Jobs Process Timeseries Get
     * Successful Response
     */
    200: Array<SystemProcessTimeseriesResponseOutput>;
};

export type GetClusterByClusterJobsProcessTimeseriesResponse = GetClusterByClusterJobsProcessTimeseriesResponses[keyof GetClusterByClusterJobsProcessTimeseriesResponses];

export type GetClusterByClusterJobsByJobIdProcessGpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Job Id
         */
        job_id: number | null;
    };
    query?: {
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/jobs/{job_id}/process/gpu/timeseries';
};

export type GetClusterByClusterJobsByJobIdProcessGpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsByJobIdProcessGpuTimeseriesError = GetClusterByClusterJobsByJobIdProcessGpuTimeseriesErrors[keyof GetClusterByClusterJobsByJobIdProcessGpuTimeseriesErrors];

export type GetClusterByClusterJobsByJobIdProcessGpuTimeseriesResponses = {
    /**
     * Response Job Sample Process Gpu Timeseries Cluster  Cluster  Jobs  Job Id  Process Gpu Timeseries Get
     * Successful Response
     */
    200: Array<JobNodeSampleProcessGpuTimeseriesResponseOutput>;
};

export type GetClusterByClusterJobsByJobIdProcessGpuTimeseriesResponse = GetClusterByClusterJobsByJobIdProcessGpuTimeseriesResponses[keyof GetClusterByClusterJobsByJobIdProcessGpuTimeseriesResponses];

export type GetClusterByClusterJobsProcessGpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Job Id
         */
        job_id?: number | null;
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/jobs/process/gpu/timeseries';
};

export type GetClusterByClusterJobsProcessGpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsProcessGpuTimeseriesError = GetClusterByClusterJobsProcessGpuTimeseriesErrors[keyof GetClusterByClusterJobsProcessGpuTimeseriesErrors];

export type GetClusterByClusterJobsProcessGpuTimeseriesResponses = {
    /**
     * Response Job Sample Process Gpu Timeseries Cluster  Cluster  Jobs Process Gpu Timeseries Get
     * Successful Response
     */
    200: Array<JobNodeSampleProcessGpuTimeseriesResponseOutput>;
};

export type GetClusterByClusterJobsProcessGpuTimeseriesResponse = GetClusterByClusterJobsProcessGpuTimeseriesResponses[keyof GetClusterByClusterJobsProcessGpuTimeseriesResponses];

export type GetClusterByClusterNodesMemoryTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/memory/timeseries';
};

export type GetClusterByClusterNodesMemoryTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesMemoryTimeseriesError = GetClusterByClusterNodesMemoryTimeseriesErrors[keyof GetClusterByClusterNodesMemoryTimeseriesErrors];

export type GetClusterByClusterNodesMemoryTimeseriesResponses = {
    /**
     * Response Nodes Process Cpu Memory Timeseries Cluster  Cluster  Nodes Memory Timeseries Get
     * Successful Response
     */
    200: {
        [key: string]: Array<SampleProcessAccResponse>;
    };
};

export type GetClusterByClusterNodesMemoryTimeseriesResponse = GetClusterByClusterNodesMemoryTimeseriesResponses[keyof GetClusterByClusterNodesMemoryTimeseriesResponses];

export type GetClusterByClusterNodesByNodenameMemoryTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
    };
    query?: {
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/memory/timeseries';
};

export type GetClusterByClusterNodesByNodenameMemoryTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameMemoryTimeseriesError = GetClusterByClusterNodesByNodenameMemoryTimeseriesErrors[keyof GetClusterByClusterNodesByNodenameMemoryTimeseriesErrors];

export type GetClusterByClusterNodesByNodenameMemoryTimeseriesResponses = {
    /**
     * Response Nodes Process Cpu Memory Timeseries Cluster  Cluster  Nodes  Nodename  Memory Timeseries Get
     * Successful Response
     */
    200: {
        [key: string]: Array<SampleProcessAccResponse>;
    };
};

export type GetClusterByClusterNodesByNodenameMemoryTimeseriesResponse = GetClusterByClusterNodesByNodenameMemoryTimeseriesResponses[keyof GetClusterByClusterNodesByNodenameMemoryTimeseriesResponses];

export type GetClusterByClusterNodesCpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/cpu/timeseries';
};

export type GetClusterByClusterNodesCpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesCpuTimeseriesError = GetClusterByClusterNodesCpuTimeseriesErrors[keyof GetClusterByClusterNodesCpuTimeseriesErrors];

export type GetClusterByClusterNodesCpuTimeseriesResponses = {
    /**
     * Response Nodes Process Cpu Memory Timeseries Cluster  Cluster  Nodes Cpu Timeseries Get
     * Successful Response
     */
    200: {
        [key: string]: Array<SampleProcessAccResponse>;
    };
};

export type GetClusterByClusterNodesCpuTimeseriesResponse = GetClusterByClusterNodesCpuTimeseriesResponses[keyof GetClusterByClusterNodesCpuTimeseriesResponses];

export type GetClusterByClusterNodesByNodenameCpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
    };
    query?: {
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/cpu/timeseries';
};

export type GetClusterByClusterNodesByNodenameCpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameCpuTimeseriesError = GetClusterByClusterNodesByNodenameCpuTimeseriesErrors[keyof GetClusterByClusterNodesByNodenameCpuTimeseriesErrors];

export type GetClusterByClusterNodesByNodenameCpuTimeseriesResponses = {
    /**
     * Response Nodes Process Cpu Memory Timeseries Cluster  Cluster  Nodes  Nodename  Cpu Timeseries Get
     * Successful Response
     */
    200: {
        [key: string]: Array<SampleProcessAccResponse>;
    };
};

export type GetClusterByClusterNodesByNodenameCpuTimeseriesResponse = GetClusterByClusterNodesByNodenameCpuTimeseriesResponses[keyof GetClusterByClusterNodesByNodenameCpuTimeseriesResponses];

export type GetClusterByClusterNodesGpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Nodename
         */
        nodename?: string | null;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/gpu/timeseries';
};

export type GetClusterByClusterNodesGpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesGpuTimeseriesError = GetClusterByClusterNodesGpuTimeseriesErrors[keyof GetClusterByClusterNodesGpuTimeseriesErrors];

export type GetClusterByClusterNodesGpuTimeseriesResponses = {
    /**
     * Successful Response
     */
    200: NodeGpuTimeseriesResponse;
};

export type GetClusterByClusterNodesGpuTimeseriesResponse = GetClusterByClusterNodesGpuTimeseriesResponses[keyof GetClusterByClusterNodesGpuTimeseriesResponses];

export type GetClusterByClusterNodesByNodenameGpuTimeseriesData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Nodename
         */
        nodename: string | null;
    };
    query?: {
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
    };
    url: '/cluster/{cluster}/nodes/{nodename}/gpu/timeseries';
};

export type GetClusterByClusterNodesByNodenameGpuTimeseriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterNodesByNodenameGpuTimeseriesError = GetClusterByClusterNodesByNodenameGpuTimeseriesErrors[keyof GetClusterByClusterNodesByNodenameGpuTimeseriesErrors];

export type GetClusterByClusterNodesByNodenameGpuTimeseriesResponses = {
    /**
     * Successful Response
     */
    200: NodeGpuTimeseriesResponse;
};

export type GetClusterByClusterNodesByNodenameGpuTimeseriesResponse = GetClusterByClusterNodesByNodenameGpuTimeseriesResponses[keyof GetClusterByClusterNodesByNodenameGpuTimeseriesResponses];

export type GetClusterByClusterJobsData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * States
         */
        states?: string | null;
    };
    url: '/cluster/{cluster}/jobs';
};

export type GetClusterByClusterJobsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsError = GetClusterByClusterJobsErrors[keyof GetClusterByClusterJobsErrors];

export type GetClusterByClusterJobsResponses = {
    /**
     * Successful Response
     */
    200: JobsResponse;
};

export type GetClusterByClusterJobsResponse = GetClusterByClusterJobsResponses[keyof GetClusterByClusterJobsResponses];

export type GetClusterByClusterJobsByJobIdEpochByEpochInfoData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Job Id
         */
        job_id: number;
        /**
         * Epoch
         */
        epoch: number;
    };
    query?: {
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
        /**
         * States
         */
        states?: string | null;
    };
    url: '/cluster/{cluster}/jobs/{job_id}/epoch/{epoch}/info';
};

export type GetClusterByClusterJobsByJobIdEpochByEpochInfoErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsByJobIdEpochByEpochInfoError = GetClusterByClusterJobsByJobIdEpochByEpochInfoErrors[keyof GetClusterByClusterJobsByJobIdEpochByEpochInfoErrors];

export type GetClusterByClusterJobsByJobIdEpochByEpochInfoResponses = {
    /**
     * Successful Response
     */
    200: JobResponse;
};

export type GetClusterByClusterJobsByJobIdEpochByEpochInfoResponse = GetClusterByClusterJobsByJobIdEpochByEpochInfoResponses[keyof GetClusterByClusterJobsByJobIdEpochByEpochInfoResponses];

export type GetClusterByClusterJobsByJobIdEpochByEpochData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Job Id
         */
        job_id: number;
        /**
         * Epoch
         */
        epoch: number;
    };
    query?: {
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
        /**
         * States
         */
        states?: string | null;
    };
    url: '/cluster/{cluster}/jobs/{job_id}/epoch/{epoch}';
};

export type GetClusterByClusterJobsByJobIdEpochByEpochErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsByJobIdEpochByEpochError = GetClusterByClusterJobsByJobIdEpochByEpochErrors[keyof GetClusterByClusterJobsByJobIdEpochByEpochErrors];

export type GetClusterByClusterJobsByJobIdEpochByEpochResponses = {
    /**
     * Successful Response
     */
    200: JobResponse;
};

export type GetClusterByClusterJobsByJobIdEpochByEpochResponse = GetClusterByClusterJobsByJobIdEpochByEpochResponses[keyof GetClusterByClusterJobsByJobIdEpochByEpochResponses];

export type GetClusterByClusterJobsByJobIdInfoData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Job Id
         */
        job_id: number;
    };
    query?: {
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
        /**
         * States
         */
        states?: string | null;
    };
    url: '/cluster/{cluster}/jobs/{job_id}/info';
};

export type GetClusterByClusterJobsByJobIdInfoErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsByJobIdInfoError = GetClusterByClusterJobsByJobIdInfoErrors[keyof GetClusterByClusterJobsByJobIdInfoErrors];

export type GetClusterByClusterJobsByJobIdInfoResponses = {
    /**
     * Successful Response
     */
    200: JobResponse;
};

export type GetClusterByClusterJobsByJobIdInfoResponse = GetClusterByClusterJobsByJobIdInfoResponses[keyof GetClusterByClusterJobsByJobIdInfoResponses];

export type GetClusterByClusterJobsByJobIdData = {
    /**
     * App Settings
     */
    body?: AppSettings | null;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Job Id
         */
        job_id: number;
    };
    query?: {
        /**
         * Epoch
         */
        epoch?: number;
        /**
         * Start Time In S
         */
        start_time_in_s?: number | null;
        /**
         * End Time In S
         */
        end_time_in_s?: number | null;
        /**
         * Resolution In S
         */
        resolution_in_s?: number | null;
        /**
         * States
         */
        states?: string | null;
    };
    url: '/cluster/{cluster}/jobs/{job_id}';
};

export type GetClusterByClusterJobsByJobIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsByJobIdError = GetClusterByClusterJobsByJobIdErrors[keyof GetClusterByClusterJobsByJobIdErrors];

export type GetClusterByClusterJobsByJobIdResponses = {
    /**
     * Successful Response
     */
    200: JobResponse;
};

export type GetClusterByClusterJobsByJobIdResponse = GetClusterByClusterJobsByJobIdResponses[keyof GetClusterByClusterJobsByJobIdResponses];

export type GetClusterByClusterJobsQueryData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: {
        /**
         * User
         */
        user?: string | null;
        /**
         * User Id
         */
        user_id?: number | null;
        /**
         * Job Id
         */
        job_id?: number | null;
        /**
         * Start Before In S
         */
        start_before_in_s?: number | null;
        /**
         * Start After In S
         */
        start_after_in_s?: number | null;
        /**
         * End Before In S
         */
        end_before_in_s?: number | null;
        /**
         * End After In S
         */
        end_after_in_s?: number | null;
        /**
         * Submit Before In S
         */
        submit_before_in_s?: number | null;
        /**
         * Submit After In S
         */
        submit_after_in_s?: number | null;
        /**
         * Min Duration In S
         */
        min_duration_in_s?: number | null;
        /**
         * Max Duration In S
         */
        max_duration_in_s?: number | null;
        /**
         * States
         */
        states?: string;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/cluster/{cluster}/jobs/query';
};

export type GetClusterByClusterJobsQueryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterJobsQueryError = GetClusterByClusterJobsQueryErrors[keyof GetClusterByClusterJobsQueryErrors];

export type GetClusterByClusterJobsQueryResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetJobqueryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Cluster
         */
        cluster?: string | null;
        /**
         * User
         */
        user?: string;
        /**
         * Host
         */
        host?: string;
        /**
         * Job Id
         */
        job_id?: string;
        /**
         * To
         */
        to?: string;
        /**
         * From
         */
        from?: string;
        /**
         * Fmt
         */
        fmt?: string;
    };
    url: '/jobquery';
};

export type GetJobqueryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetJobqueryError = GetJobqueryErrors[keyof GetJobqueryErrors];

export type GetJobqueryResponses = {
    /**
     * Response Dashboard Job Query Jobquery Get
     * Successful Response
     */
    200: Array<JobQueryResultItemOutput>;
};

export type GetJobqueryResponse = GetJobqueryResponses[keyof GetJobqueryResponses];

export type GetJobprofileData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Cluster
         */
        cluster?: string | null;
        /**
         * User
         */
        user?: string;
        /**
         * Host
         */
        host?: string;
        /**
         * Job
         */
        job?: number;
        /**
         * To
         */
        to?: string;
        /**
         * From
         */
        from: string;
        /**
         * Fmt
         */
        fmt?: string;
    };
    url: '/jobprofile';
};

export type GetJobprofileErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetJobprofileError = GetJobprofileErrors[keyof GetJobprofileErrors];

export type GetJobprofileResponses = {
    /**
     * Response Dashboard Job Profile Jobprofile Get
     * Successful Response
     */
    200: Array<JobProfileResultItem>;
};

export type GetJobprofileResponse = GetJobprofileResponses[keyof GetJobprofileResponses];

export type GetClusterByClusterQueriesData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
    };
    query?: never;
    url: '/cluster/{cluster}/queries';
};

export type GetClusterByClusterQueriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterQueriesError = GetClusterByClusterQueriesErrors[keyof GetClusterByClusterQueriesErrors];

export type GetClusterByClusterQueriesResponses = {
    /**
     * Successful Response
     */
    200: QueriesResponse;
};

export type GetClusterByClusterQueriesResponse = GetClusterByClusterQueriesResponses[keyof GetClusterByClusterQueriesResponses];

export type GetClusterByClusterQueriesByQueryNameData = {
    body?: never;
    path: {
        /**
         * Cluster
         */
        cluster: string;
        /**
         * Query Name
         */
        query_name: string;
    };
    query?: never;
    url: '/cluster/{cluster}/queries/{query_name}';
};

export type GetClusterByClusterQueriesByQueryNameErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClusterByClusterQueriesByQueryNameError = GetClusterByClusterQueriesByQueryNameErrors[keyof GetClusterByClusterQueriesByQueryNameErrors];

export type GetClusterByClusterQueriesByQueryNameResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetBenchmarksByBenchmarkNameData = {
    body?: never;
    path: {
        /**
         * Benchmark Name
         */
        benchmark_name: string;
    };
    query?: never;
    url: '/benchmarks/{benchmark_name}';
};

export type GetBenchmarksByBenchmarkNameErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetBenchmarksByBenchmarkNameError = GetBenchmarksByBenchmarkNameErrors[keyof GetBenchmarksByBenchmarkNameErrors];

export type GetBenchmarksByBenchmarkNameResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: `${string}://${string}/api/v2` | (string & {});
};